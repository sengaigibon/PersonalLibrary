{% extends 'base.html.twig' %}

{% block title %}Book index{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/rr-styles.css') }}">
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function startReading(buttonElement) {
            const bookId = buttonElement.getAttribute('data-path').split('/').pop();
            const dataPath = buttonElement.getAttribute('data-path');

            console.log('Starting to read book:', bookId);

            // Make AJAX request to start reading endpoint
            fetch(dataPath, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                return response.json().then(data => ({
                    status: response.status,
                    data: data
                }));
            })
            .then(result => {
                if (result.status === 200 && result.data.success) {
                    // Success: Update button to "Reading now..." and disable it
                    buttonElement.textContent = 'üìñ Reading now...';
                    buttonElement.style.backgroundColor = '#95a5a6';
                    buttonElement.style.cursor = 'not-allowed';
                    buttonElement.style.pointerEvents = 'none';
                    buttonElement.onclick = null;

                    console.log('Successfully started reading bookId:', bookId);
                } else if (result.status === 400 && result.data.error) {
                    // Error: Show alert with error message
                    alert('Error starting reading: ' + result.data.error);
                } else {
                    // Unexpected response
                    alert('Unexpected response from server');
                }
            })
            .catch(error => {
                console.error('Error making request:', error);
                alert('Network error occurred while starting reading');
            });
        }

        function finishReading(bookId) {
            // TODO: Implement finish reading functionality
            console.log('Finishing reading book:', bookId);
            alert('Finish reading:  (ID: ' + bookId + ')');

            // Future implementation could include:
            // - Update existing ReadLog entry with finishDate = today
            // - Prompt for rating and notes
            // - Update book status to "completed"
            // - Show confirmation message
            // - Refresh the page or update the UI
        }
    </script>
{% endblock %}

{% block body %}
<div class="books-container">
    <div class="books-header">
        <h1>üìö Books Library</h1>
        <a href="{{ path('app_book_new') }}" class="btn-base btn-new">+ Add New Book</a>
    </div>

    <table class="table modern-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Author</th>
                <th>Purchase Date</th>
                <th>Readed?</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        {% for book in books %}
            {% if book is not null and book is not empty %}
            <tr>
                <td>{{ book.id }}</td>
                <td class="book-title">{{ book.title ?? '' }}</td>
                <td class="book-author">{{ book.author ?? '' }}</td>
                <td class="purchase-date">{{ book.purchaseDate ? book.purchaseDate|date('Y-m-d') : '' }}</td>
                <td class="read-status">
                    {% set hasFinishedReading = false %}
                    {% set isCurrentlyReading = false %}

                    {% for readLog in book.readLogs %}
                        {% if readLog.startDate is not empty and readLog.finishDate is empty %}
                            {% set isCurrentlyReading = true %}
                        {% elseif readLog.finishDate is not empty %}
                            {% set hasFinishedReading = true %}
                        {% endif %}
                    {% endfor %}

                    {% if book.readLogs is not empty and hasFinishedReading %}
                        <span class="read-status-icon read-yes">‚úÖ</span>
                    {% else %}
                        <span class="read-status-icon read-no">‚ùå</span>
                    {% endif %}
                </td>
                <td>
                    {% if book.id is not null %}
                    <a href="{{ path('app_book_show', {'id': book.id}) }}" class="action-btn btn-show">üëÅ Show</a>
                    <a href="{{ path('app_book_edit', {'id': book.id}) }}" class="action-btn btn-edit">‚úèÔ∏è Edit</a>

                    {% if isCurrentlyReading %}
                        <span class="action-btn btn-start-reading" style="background-color: #95a5a6; cursor: not-allowed; pointer-events: none;">üìñ Reading now...</span>
                    {% else %}
                        <a href="#" class="action-btn btn-start-reading" data-path="{{ path('app_book_start', {'id': book.id}) }}" onclick="startReading(this); return false;">üìñ Start Reading</a>
                    {% endif %}

                    <a href="#" class="action-btn btn-finish-reading" onclick="finishReading({{ book.id }}); return false;">‚úÖ Finish Reading</a>
                    {% endif %}
                </td>
            </tr>
            {% endif %}
        {% else %}
            <tr>
                <td colspan="6" class="no-records">üìñ No books found. Start building your library!</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}
